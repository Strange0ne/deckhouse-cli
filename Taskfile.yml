version: "3"

vars:
  buildDate:
    sh: date -u +'%Y-%m-%dT%H:%M:%SZ'
  version:
    sh: git describe --tags
  kubectlVersion: v1.29.3
  kubectlLDFlags:
    sh: |
      buildDate="{{ .buildDate }}"
      gitCommit="0000000000000000000000000000000000000000"
      gitTreeState="archive"
      gitVersion="{{ .kubectlVersion }}"
      _strippedGitVersion="${gitVersion#[vV]}"
      gitMajor="$(cut -d. -f1 <<< "$_strippedGitVersion")"
      gitMinor="$(cut -d. -f2 <<< "$_strippedGitVersion")"

      declare -a ldflags
      function add_ldflag() {
        local key=${1}
        local val=${2}
        ldflags+=(
            "-X 'k8s.io/client-go/pkg/version.${key}=${val}'"
            "-X 'k8s.io/component-base/version.${key}=${val}'"
        )
      }

      for ldflag in buildDate gitCommit gitTreeState gitVersion gitMajor gitMinor; do
        add_ldflag "${ldflag}" "${!ldflag}"
      done

      echo "${ldflags[*]-}"
  ldFlags: -s -w -extldflags=-static -X 'github.com/deckhouse/deckhouse-cli/cmd.Version={{ .version }}' {{ .kubectlLDFlags }}

tasks:
  _build:dist:
    internal: true
    cmds:
      - go build -o "{{ .outputDir | default (printf "./dist/%s/%s-%s" .version .targetOS .targetArch) }}/d8"
        -ldflags="{{ .ldFlags }}" {{ .CLI_ARGS }} main.go
    env:
      CGO_ENABLED: "0"
      GOOS: "{{ .targetOS }}"
      GOARCH: "{{ .targetArch }}"

  build:
    desc: Build d8 binary for personal usage
    run: once
    cmds:
      - task: build:dist:{{ OS }}:{{ ARCH }}
        vars:
          outputDir: "."

  build:dist:all:
    desc: Build all d8 release binaries in parallel
    deps:
      - build:dist:linux:amd64
      - build:dist:darwin:amd64
      - build:dist:darwin:arm64

  build:dist:linux:amd64:
    desc: Build d8 release binary for linux/amd64
    cmds:
      - task: _build:dist
        vars:
          targetOS: "linux"
          targetArch: "amd64"
          outputDir: "{{ .outputDir }}"

  build:dist:darwin:amd64:
    desc: Build d8 release binary for darwin/amd64
    cmds:
      - task: _build:dist
        vars:
          targetOS: "darwin"
          targetArch: "amd64"
          outputDir: "{{ .outputDir }}"

  build:dist:darwin:arm64:
    desc: Build d8 release binary for darwin/arm64
    cmds:
      - task: _build:dist
        vars:
          targetOS: "darwin"
          targetArch: "arm64"
          outputDir: "{{ .outputDir }}"

  _package:dist:
    internal: true
    dir: dist/{{ .version }}
    cmds:
      - cp ../../LICENSE ../../README.md {{ .target }}
      - tar -zcf d8-{{ .version }}-{{ .target }}.tar.gz {{ .target }}

  package:dist:all:
    desc: Package all release assets in parallel
    deps:
      - package:dist:linux:amd64
      - package:dist:darwin:amd64
      - package:dist:darwin:arm64

  package:dist:linux:amd64:
    desc: Package release asset for linux/amd64
    dir: dist/{{ .version }}
    cmds:
      - task: _package:dist
        vars:
          target: "linux-amd64"

  package:dist:darwin:amd64:
    desc: Package release asset for darwin/amd64
    dir: dist/{{ .version }}
    cmds:
      - task: _package:dist
        vars:
          target: "darwin-amd64"

  package:dist:darwin:arm64:
    desc: Package release asset for darwin/arm64
    dir: dist/{{ .version }}
    cmds:
      - task: _package:dist
        vars:
          target: "darwin-arm64"

  checksum:
    desc: Calculate sha256 checksum for release assets
    dir: dist/{{ .version }}
    cmds:
      - |
        for asset in *.tar.gz; do
          shasum -a 256 "${asset}" > "${asset}".sha256sum
        done

  build-and-package:
    desc: Build and package all d8 binaries
    cmds:
      - task: build:dist:all
      - task: package:dist:all
      - task: checksum

  clean:
    desc: Clean all binaries
    cmds:
      - rm -rf ./dist ./d8
